name: CAP CI/CD on Cloud Foundry
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  NODE_VERSION: '20.x'
  MTAR_NAME: ${{ replace(github.repository, '/', '-') }}-${{ github.sha }}.mtar
jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "package-lock.json not found; falling back to npm install"
            npm install
          fi

      - name: Validate CDS models (CSN compile)
        shell: bash
        run: |
          set -e
          npx cds compile srv --to csn

      - name: Run unit tests (if available)
        shell: bash
        run: |
          set -e
          if node -e "const p=require('./package.json'); process.exit(p.scripts && p.scripts.test ? 0 : 1)"; then
            npm test
          else
            echo "No test script defined; skipping npm test"
          fi

      - name: Build project (CDS build)
        shell: bash
        run: |
          set -e
          if node -e "const p=require('./package.json'); process.exit(p.scripts && p.scripts.build ? 0 : 1)"; then
            npm run build
          else
            echo "No build script; running npx cds build as fallback"
            npx cds build
          fi

      - name: Install Cloud MTA Build Tool
        shell: bash
        run: |
          set -e
          sudo npm install -g mbt
          sudo apt-get update
          sudo apt-get install -y make

      - name: Build MTAR
        shell: bash
        run: |
          set -e
          if [ -f mta.yaml ] || [ -f mta.yml ]; then
            mbt build -t mta_archives
            MTAR_SOURCE=$(find mta_archives -maxdepth 1 -name "*.mtar" | head -n 1)
            if [ -z "$MTAR_SOURCE" ]; then
              echo "No MTAR archive generated by mbt build"
              exit 1
            fi
            mv "$MTAR_SOURCE" "${MTAR_NAME}"
            echo "MTAR built: ${MTAR_NAME}"
          else
            echo "mta.yaml not found in repository root. Cannot build MTAR."
            exit 1
          fi

      - name: Upload MTAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mtar
          path: ${{ env.MTAR_NAME }}
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy to Cloud Foundry
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download MTAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mtar
          path: .

      - name: Install Cloud Foundry CLI and MultiApps plugin
        shell: bash
        run: |
          set -e
          curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8&source=github" | tar -zx
          sudo mv cf /usr/local/bin/
          cf version
          cf install-plugin -f https://github.com/cloudfoundry/multiapps-cli-plugin/releases/latest/download/multiapps-cli-plugin.linux64
          cf plugins

      - name: CF Login
        shell: bash
        env:
          CF_API: ${{ secrets.CF_API }}
          CF_ORG: ${{ secrets.CF_ORG }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        run: |
          set -e
          cf api "$CF_API"
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "$CF_ORG" -s "$CF_SPACE"

      - name: Deploy MTAR
        shell: bash
        env:
          MTAR_NAME: ${{ env.MTAR_NAME }}
        run: |
          set -e
          ls -l "${MTAR_NAME}"
          cf deploy "${MTAR_NAME}" -f

      - name: CF Logout
        shell: bash
        run: |
          set -e
          cf logout